// GameDetail.js

import { useParams } from 'react-router-dom';
import { useEffect, useState } from 'react';

export default function GameDetail() {
  const { gameId } = useParams();
  const [game, setGame] = useState(null);
  const [objectives, setObjectives] = useState([]);
  const [scoringMode, setScoringMode] = useState(false);

  useEffect(() => {
    fetch(`http://localhost:8080/games/${gameId}`)
      .then(res => res.json())
      .then(setGame)
      .catch((err) => console.error("Error loading game:", err));

    fetch(`http://localhost:8080/games/${gameId}/objectives`)
      .then(res => res.json())
      .then(setObjectives)
      .catch((err) => console.error("Error loading objectives:", err));
  }, [gameId]);

  const scoreObjective = async (playerId, objectiveId) => {
    const payload = {
      game_id: parseInt(gameId),
      player_id: playerId,
      objective_id: objectiveId,
    };

    try {
      await fetch("http://localhost:8080/score", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const updatedGame = await fetch(`http://localhost:8080/games/${gameId}`).then(res => res.json());
      setGame(updatedGame);

      const updatedObjectives = await fetch(`http://localhost:8080/games/${gameId}/objectives`).then(res => res.json());
      setObjectives(updatedObjectives);
    } catch (err) {
      console.error("Scoring failed:", err);
    }
  };

  const advanceRound = async () => {
    await fetch(`http://localhost:8080/games/${gameId}/advance-round`, { method: "POST" });

    const updatedGame = await fetch(`http://localhost:8080/games/${gameId}`).then(res => res.json());
    setGame(updatedGame);

    const updatedObjectives = await fetch(`http://localhost:8080/games/${gameId}/objectives`).then(res => res.json());
    setObjectives(updatedObjectives);
  };

  const getMergedPlayerData = () => {
    const scoreMap = new Map(game?.scores?.map(s => [s.player_id, s]) || []);
    return game?.players?.map(p => {
      const id = p.PlayerID;
      const name = p.Player?.Name || "Unknown";
      const faction = p.Faction || "Unknown Faction";
      const color = p.color || "#000";
      const points = scoreMap.get(id)?.points || 0;

      return { id, name, faction, color, points };
    }) || [];
  };

  if (!game) return <div className="p-6">Loading...</div>;

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>Round {game.current_round} | {game.winning_points} Point Game</h2>
        <div className="d-flex gap-3 align-items-center">
          <label className="form-check-label me-2">Score Objectives</label>
          <input
            className="form-check-input"
            type="checkbox"
            checked={scoringMode}
            onChange={(e) => setScoringMode(e.target.checked)}
          />
          <button className="btn btn-outline-primary btn-sm" onClick={advanceRound}>
            Advance Round
          </button>
        </div>
      </div>

      <div className="row">
        <div className="col-md-6">
          <h4>Objectives</h4>
          {objectives.map(obj => {
            const isStageTwo = obj.Stage === "II";
            const stageColor = isStageTwo ? "#00bfff" : "#ffd700";
            const glowColor = isStageTwo ? "rgba(0,191,255,0.4)" : "rgba(255,215,0,0.4)";

            return (
              <div
                key={obj.ID}
                className="card mb-3 shadow"
                style={{
                  backgroundColor: "#1a1a1a",
                  border: `2px solid ${stageColor}`,
                  borderRadius: "10px",
                  color: "#fff",
                  fontFamily: "'Orbitron', sans-serif",
                  boxShadow: `0 0 10px ${glowColor}`,
                }}
              >
                <div className="card-body">
                  <h5>{obj.Objective?.Name || "Unnamed Objective"}</h5>
                  <p className="small fst-italic text-light">
                    {obj.Objective?.description || "No description provided."}
                  </p>
                  <span
                    className="badge"
                    style={{
                      backgroundColor: stageColor,
                      color: "#000",
                      fontWeight: "bold",
                      fontSize: "0.75rem",
                    }}
                  >
                    {obj.Objective?.type?.toUpperCase() || "PUBLIC"}
                  </span>
                  {scoringMode && (
                    <div className="mt-3 d-flex flex-wrap gap-2">
                      {game.players.map(p => (
                        <button
                          key={p.PlayerID}
                          className="btn btn-sm text-white"
                          style={{ backgroundColor: p.color, borderRadius: "6px" }}
                          onClick={() => scoreObjective(p.PlayerID, obj.Objective.ID)}
                        >
                          {p.Player?.Name || "Unknown"}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>

        <div className="col-md-6">
          {getMergedPlayerData().map(player => (
            <div
              key={player.id}
              className="card mb-3 border-start border-5"
              style={{ borderColor: player.color }}
            >
              <div className="card-body">
                <div className="fw-semibold small">{player.name}</div>
                <div className="fst-italic small text-muted">{player.faction}</div>
                <div className="mt-1 small">Points: {player.points}</div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
